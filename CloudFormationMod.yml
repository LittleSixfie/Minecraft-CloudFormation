Description:  Cloud formation file for the generation of EC2 instance for playing minecraft  
Resources: 
  NewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: MyKeyPair
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 20.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: minecraft
        Value: cloudformation
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: myVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 20.0.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: minecraft
        Value: !Sub ${AWS::StackName}-Public-A
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: minecraft
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
      Type: AWS::EC2::Route
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
  PublicSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetA
        RouteTableId: !Ref PublicRouteTable
  InstanceSecurityGroup:
    DependsOn: myVPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 25565
          ToPort: 25565
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  minecraftEC2:
    DependsOn: InstanceSecurityGroup
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref NewKeyPair
      DisableApiTermination: false
      ImageId:  ami-0b32f28c087a5087a 
      InstanceType: t4g.medium	
      Monitoring: true
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: InstanceSecurityGroup
          SubnetId: 
            Ref: PublicSubnetA
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash -ex
            sudo dnf install -y java-1.8.0-amazon-corretto
            #sudo dnf install -y java-1.8.0-amazon-corretto-devel
            sudo yum install unzip
            sudo adduser minecraft
            sudo su
            mkdir /opt/minecraft/ 
            mkdir /opt/minecraft/server/
            cd /opt/minecraft/server
            wget https://mediafilez.forgecdn.net/files/4653/48/RAD2-Serverpack-1.5.zip
            unzip RAD2-Serverpack-1.5.zip
            cd ./RAD2-Serverpack-1.5
            sudo chown -R minecraft:minecraft /opt/minecraft/
            sed -i 's/false/true/g' eula.txt 
            sed -i 's/online-mode=true/online-mode=false/g' server.properties
            java -Xmx3000M -Xms3000M  -XX:PermSize=3000m -jar forge-1.16.5-36.2.39.jar nogui
      Tags:
        - Key: minecraft
          Value: cloudformation
Outputs:
  StackKey:
    Description: keypair
    Value: !Ref NewKeyPair